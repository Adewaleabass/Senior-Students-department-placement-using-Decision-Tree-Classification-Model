# -*- coding: utf-8 -*-
"""Senior Students' department placement using Decision Tree Classification Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11SBS6v7oUPn5FBoMCII2iJoQGqTRvZeT

##Decision Tree Classification

##Importing the Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""##Importing the Dataset"""

dataset = pd.read_csv('student_scores_science_commercial3.csv')
print(dataset)

dataset['Average_Score'] = dataset[['English', 'Maths', 'Basic_Science']].mean(axis=1)
print(dataset['Average_Score'])

dataset['Department'] = dataset['Average_Score'].apply(lambda x: 'Science' if x >= 50 else 'Commercial')

"""##Encoding the Categorical Data"""

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
dataset['Department_Code'] = label_encoder.fit_transform(dataset['Department'])

print(dataset['Department_Code'])

"""##Features and Dependent Variables"""

X = dataset[['Average_Score']]
y = dataset['Department_Code']

print(X)

print(y)

"""##Splitting the Dataset to Training Set and Test Set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

"""## Training the Decision Tree model on the Training set"""

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)

"""##Predicting a new results"""

predictions = classifier.predict(X_test)

print(classifier.predict([[34.333333]]))

"""##Prediciting the Test Results"""

comparison_dataset = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

print(comparison_dataset)

"""##Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""## Visualising the Training Results"""

plt.figure(figsize=(14, 6))

# Training set visualization
plt.subplot(1, 2, 1)
sns.scatterplot(x=X_train['Average_Score'], y=y_train, hue=label_encoder.inverse_transform(y_train), palette='viridis')
plt.title('Training Set')
plt.xlabel('Average Score')
plt.ylabel('Department Code')

plt.tight_layout()
plt.show()

"""##Visualising the Test Results"""

plt.subplot(1, 2, 2)
sns.scatterplot(x=X_test['Average_Score'], y=y_test, hue=label_encoder.inverse_transform(y_test), palette='viridis')
plt.title('Test Set')
plt.xlabel('Average Score')
plt.ylabel('Department Code')

plt.tight_layout()
plt.show()